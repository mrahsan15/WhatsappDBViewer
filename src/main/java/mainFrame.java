
import java.io.File;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author ahsan
 */
public class mainFrame extends javax.swing.JFrame {
    Connection connection;
    File DBFile = new File("");
    JFileChooser openDbChooser ;
    JFrame myframe = this;
    
    
    
    public mainFrame() {
        this.setTitle("Whatsapp DB Viewer");
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        DatabaseCaptionLabel = new javax.swing.JLabel();
        OpenDatabaseButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        ChatList_Table = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        MessagesList_Table = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        OpenDBMenuItem = new javax.swing.JMenuItem();
        ExitMenuItem = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBounds(new java.awt.Rectangle(0, 0, 700, 700));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
        setName("Whatsapp DB Viewer"); // NOI18N

        DatabaseCaptionLabel.setText("Please Select Database!");

        OpenDatabaseButton.setText("Open Database");
        OpenDatabaseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenDatabaseButtonActionPerformed(evt);
            }
        });

        ChatList_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Chat List"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        ChatList_Table.setToolTipText("Whatsapp Chat List");
        ChatList_Table.setRowSelectionAllowed(false);
        ChatList_Table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ChatList_TableMouseClicked(evt);
            }
        });
        ChatList_Table.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                ChatList_TablePropertyChange(evt);
            }
        });
        ChatList_Table.addVetoableChangeListener(new java.beans.VetoableChangeListener() {
            public void vetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {
                ChatList_TableVetoableChange(evt);
            }
        });
        jScrollPane1.setViewportView(ChatList_Table);
        ChatList_Table.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
            public void valueChanged(ListSelectionEvent event) {
                MessageToTable(ChatList_Table.getValueAt(ChatList_Table.getSelectedRow(), 0).toString());

            }
        });

        MessagesList_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Messages"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        MessagesList_Table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        MessagesList_Table.setColumnSelectionAllowed(true);
        jScrollPane2.setViewportView(MessagesList_Table);
        MessagesList_Table.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        //MessagesList_Table.setMaximumSize(super.getMaximumSize());
        MessagesList_Table.setMaximumSize(super.getPreferredSize());
        MessagesList_Table.setMinimumSize(MessagesList_Table.getPreferredSize());
        MessagesList_Table.repaint(0, 0, super.getWidth(), super.getHeight());

        jMenu1.setText("File");

        OpenDBMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        OpenDBMenuItem.setText("Open Database File");
        OpenDBMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenDBMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(OpenDBMenuItem);

        ExitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        ExitMenuItem.setText("Exit");
        ExitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(ExitMenuItem);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(OpenDatabaseButton)
                .addGap(18, 18, 18)
                .addComponent(DatabaseCaptionLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 834, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(OpenDatabaseButton)
                    .addComponent(DatabaseCaptionLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void OpenDBMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenDBMenuItemActionPerformed
        
    }//GEN-LAST:event_OpenDBMenuItemActionPerformed

    private DefaultTableModel MessageToTable(String ChatHeader){
        Connection connection = new DBConnectivity().SqliteConnect(DBFile.getAbsolutePath());
        DefaultTableModel messagemodel = new DefaultTableModel();
        messagemodel.addColumn("Messages List");
        MessagesList_Table.setModel(messagemodel);
        try{
            String messagesquery = "SELECT data from messages WHERE key_remote_jid = '"+ChatHeader+"'";
            Statement messagelist = connection.createStatement();
            ResultSet messageset = messagelist.executeQuery(messagesquery);
            
//            addRows(MessagesList_Table); 
            int counter = 0;
            ArrayList al = new ArrayList();
            while(messageset.next()){
                
                String Message = messageset.getString("data");
                try{
                    Object[] rowDataa = new Object[]{Message};
//                    al.add(Message);
//                    addRows(MessagesList_Table,Message, counter);
                    messagemodel.addRow(rowDataa);
                }catch(Exception ex){
                    System.out.println("Exception Caught: "+ex);
                    Object[] rowDataa = new Object[]{"null"};
                    messagemodel.addRow(rowDataa);
                }
            }
//            addRows(MessagesList_Table, al);
//            MessagesList_Table.getColumnModel().getColumn(0).setCellRenderer(new TextAreaRenderer());
            MessagesList_Table.setModel(messagemodel);
        }catch(Exception ex){
            System.out.println("Error in DB Query: "+ex);
        }

        return messagemodel;
    }
    private void addRows(JTable table, ArrayList al) { 
        table = new JTable(al.size(), 0);
        TableColumnModel cmodel = MessagesList_Table.getColumnModel(); 
        TextAreaRenderer textAreaRenderer = new TextAreaRenderer();
        cmodel.getColumn(0).setCellRenderer(new DefaultTableCellRenderer()); 
        for(int i = 0; i < al.size(); i++){
            String props =  (String) al.get(i);
            table.setValueAt(props, i, 0); 
        
        }
        
        
    }
    private void ExitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ExitMenuItemActionPerformed
    
    private void OpenDatabaseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenDatabaseButtonActionPerformed

        FileNameExtensionFilter filter = new FileNameExtensionFilter("DB files", "db", "Database");
        openDbChooser = new JFileChooser() ;
        openDbChooser.setFileFilter(filter);
        openDbChooser.showOpenDialog(this);
        if(openDbChooser.getSelectedFile().exists()){
            DBFile = openDbChooser.getSelectedFile();
            DatabaseCaptionLabel.setText("Database Loaded!");
        }else{
            DatabaseCaptionLabel.setText("No Database Selected");
        }

        //        DBFile = new File("/home/ahsan/Downloads/WhatsApp-Key-DB-Extractor-master (2)/extracted Ujala/msgstore.db");
        Connection connection = new DBConnectivity().SqliteConnect(DBFile.getAbsolutePath());
        TableModel datamodel ;
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("Chats");
        ChatList_Table.setModel(model);
        try{
            String chatquery = "SELECT * from chat_list";
            Statement chatlist = connection.createStatement();
            ResultSet chatset = chatlist.executeQuery(chatquery);
            while(chatset.next()){
                String ChatHeader = chatset.getString("key_remote_jid");
                Object[] rowDataa = new Object[]{ChatHeader};
                ChatList_Table.setRowHeight(ChatList_Table.getRowHeight());
                model.addRow(rowDataa);
            }
            ChatList_Table.setModel(model);
        }catch(Exception ex){
            System.out.println("Error in DB Query");
        }      
    }//GEN-LAST:event_OpenDatabaseButtonActionPerformed

    private void ChatList_TablePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_ChatList_TablePropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_ChatList_TablePropertyChange

    private void ChatList_TableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ChatList_TableMouseClicked
        
    }//GEN-LAST:event_ChatList_TableMouseClicked

    private void ChatList_TableVetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {//GEN-FIRST:event_ChatList_TableVetoableChange
        // TODO add your handling code here:
    }//GEN-LAST:event_ChatList_TableVetoableChange
    
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new mainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable ChatList_Table;
    private javax.swing.JLabel DatabaseCaptionLabel;
    private javax.swing.JMenuItem ExitMenuItem;
    private javax.swing.JTable MessagesList_Table;
    private javax.swing.JMenuItem OpenDBMenuItem;
    private javax.swing.JButton OpenDatabaseButton;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
